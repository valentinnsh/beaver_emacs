;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'Info-edit-mode-abbrev-table '())

(define-abbrev-table 'awk-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'bibtex-mode-abbrev-table '())

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("break" [" /* BREAK LOOP */
break;
" 1 (25 25) nil] expand-abbrev-hook 0)
    ("case" ["case :

break;
" 10 (15 6 8 16) nil] expand-abbrev-hook 0)
    ("cont" [" /* CONTINUE */
continue;
" 1 (26 26) nil] expand-abbrev-hook 0)
    ("do" ["do
{
  
}
 while ();
" 14 (21 8 17) nil] expand-abbrev-hook 0)
    ("else" ["else
{

}
" 3 (10 8) nil] expand-abbrev-hook 0)
    ("elsi" ["else if ()
{

}
" 7 (16 10 12 21) nil] expand-abbrev-hook 0)
    ("fdoc" ["/**
 * @brief 
 * 
 *
 * @param 
 *
 * @return 
 */" 37 (51 15) nil] expand-abbrev-hook 0)
    ("for" ["for (;;)
{

}
" 9 (14 6 7 9 13) nil] expand-abbrev-hook 0)
    ("fori" ["for (i = 0 ; i <  ; ++i)
{

}
" 13 (30 18) nil] expand-abbrev-hook 0)
    ("forj" ["for (j = 0 ; j <  ; ++j)
{

}
" 13 (30 18) nil] expand-abbrev-hook 0)
    ("fork" ["for (k = 0 ; k <  ; ++k)
{

}
" 13 (30 18) nil] expand-abbrev-hook 0)
    ("if" ["if (){

}
" 6 (10 5 8) nil] expand-abbrev-hook 0)
    ("ife" ["if ()
{

}
else
{

}
" 17 (21 5 10 21) nil] expand-abbrev-hook 0)
    ("ifnr" ["if (ret != RET_OK)
{

}
" 3 (24 22) nil] expand-abbrev-hook 0)
    ("ifr" ["if (ret == RET_OK)
{

}
" 3 (24 22) nil] expand-abbrev-hook 0)
    ("ifrok" ["if (ret == RET_OK)
{" 1 (20 20) nil] expand-abbrev-hook 0)
    ("main" ["int
main(
int argc,
 char **argv){
   
}
" 3 nil nil] expand-abbrev-hook 0)
    ("par" [" * @param " 1 (10 10) nil] expand-abbrev-hook 0)
    ("rok" ["ret == RET_OK" 0 (13 14) nil] expand-abbrev-hook 0)
    ("switch" ["switch ()
{
case :
break;
default:
break;
}
" 36 (44 9 13) nil] expand-abbrev-hook 0)
    ("while" ["while ()
{

}
" 7 (14 8 12) nil] expand-abbrev-hook 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("break" [" /* BREAK LOOP */
break;
" 1 (25 25) nil] expand-abbrev-hook 0)
    ("case" ["case :

break;
" 10 (15 6 8 16) nil] expand-abbrev-hook 1)
    ("cont" [" /* CONTINUE */
continue;
" 1 (26 26) nil] expand-abbrev-hook 0)
    ("do" ["do
{
  
}
 while ();
" 14 (21 8 17) nil] expand-abbrev-hook 0)
    ("else" ["else
{

}
" 3 (10 8) nil] expand-abbrev-hook 1)
    ("elsi" ["else if ()
{

}
" 7 (16 10 12 21) nil] expand-abbrev-hook 0)
    ("fdoc" ["/**
 * @brief 
 * 
 *
 * @param 
 *
 * @return 
 */" 37 (51 15) nil] expand-abbrev-hook 1)
    ("for" ["for (;;)
{

}
" 9 (14 6 7 9 13) nil] expand-abbrev-hook 0)
    ("fori" ["for (i = 0 ; i <  ; ++i)
{

}
" 13 (30 18) nil] expand-abbrev-hook 0)
    ("forj" ["for (j = 0 ; j <  ; ++j)
{

}
" 13 (30 18) nil] expand-abbrev-hook 0)
    ("fork" ["for (k = 0 ; k <  ; ++k)
{

}
" 13 (30 18) nil] expand-abbrev-hook 1)
    ("if" ["if (){

}
" 6 (10 5 8) nil] expand-abbrev-hook 1)
    ("ife" ["if ()
{

}
else
{

}
" 17 (21 5 10 21) nil] expand-abbrev-hook 0)
    ("ifnr" ["if (ret != RET_OK)
{

}
" 3 (24 22) nil] expand-abbrev-hook 0)
    ("ifr" ["if (ret == RET_OK)
{

}
" 3 (24 22) nil] expand-abbrev-hook 0)
    ("ifrok" ["if (ret == RET_OK)
{" 1 (20 20) nil] expand-abbrev-hook 0)
    ("main" ["int
main(
int argc,
 char **argv){
   
}
" 3 nil nil] expand-abbrev-hook 1)
    ("par" [" * @param " 1 (10 10) nil] expand-abbrev-hook 0)
    ("rok" ["ret == RET_OK" 0 (13 14) nil] expand-abbrev-hook 0)
    ("switch" ["switch ()
{
case :
break;
default:
break;
}
" 36 (44 9 13) nil] expand-abbrev-hook 0)
    ("while" ["while ()
{

}
" 7 (14 8 12) nil] expand-abbrev-hook 0)
   ))

(define-abbrev-table 'calendar-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'edit-abbrevs-mode-abbrev-table '())

(define-abbrev-table 'elisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'elpy-refactor-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'epa-info-mode-abbrev-table '())

(define-abbrev-table 'epa-key-list-mode-abbrev-table '())

(define-abbrev-table 'epa-key-mode-abbrev-table '())

(define-abbrev-table 'eshell-mode-abbrev-table '())

(define-abbrev-table 'f90-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'gnus-group-mode-abbrev-table '())

(define-abbrev-table 'grep-mode-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'ibuffer-mode-abbrev-table '())

(define-abbrev-table 'idl-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'ivy-occur-grep-mode-abbrev-table '())

(define-abbrev-table 'ivy-occur-mode-abbrev-table '())

(define-abbrev-table 'java-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'messages-buffer-mode-abbrev-table '())

(define-abbrev-table 'neotree-mode-abbrev-table '())

(define-abbrev-table 'objc-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'org-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'pike-mode-abbrev-table
  '(
   ))

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table '())

(define-abbrev-table 'python-mode-skeleton-abbrev-table
  '(
   ))

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'sh-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'vc-git-region-history-mode-abbrev-table '())

(define-abbrev-table 'xref--xref-buffer-mode-abbrev-table '())

